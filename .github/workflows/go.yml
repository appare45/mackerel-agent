name: Go

on:
  pull_request: {}
  push:
    branches: [master]

jobs:

  test-linux:
    name: Test (Linux)
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - run: make lint
    - run: make convention
    - run: make cover
    - run: test `gofmt -l . | wc -l` = 0
    - uses: shogo82148/actions-goveralls@v1
      with:
        path-to-profile: .profile.cov

  test-windows:
    name: Test (Windows)
    runs-on: windows-2019
    env:
      GO111MODULE: on
    strategy:
      matrix:
        PLATFORM_ID: [x86, x64]
    steps:
    - uses: actions/checkout@v2

    - name: Setup MINGW32
      if: matrix.PLATFORM_ID == 'x86'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        path-type: inherit
        install: mingw-w64-i686-gcc

    - name: Setup golang 386, Setup Environment
      if: matrix.PLATFORM_ID == 'x86'
      uses: ./.github/workflows/386-environment

    - name: Setup golang x64
      if: matrix.PLATFORM_ID == 'x64'
      uses: actions/setup-go@v2
      with:
        go-version: 1.14

    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.PLATFORM_ID }}-go-${{ hashFiles('**\go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.PLATFORM_ID }}-go-${{ hashFiles('**\go.sum') }}

    - name: Run Test
      run: |
        go vet -all .
        go test -short ./...
        foreach ($line in (Get-Content wix/pluginlist.txt) -as [string[]]) {
            powershell -Command "go list $line"
            if ($LASTEXITCODE -ne 0) {
              exit 1
            }
        }

  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    needs: test-linux
    if: github.ref == 'refs/heads/master'
    env:
      DEBIAN_FRONTEND: noninteractive
      GO111MODULE: on
    steps:
    # before-deploy
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - run: docker pull mackerel/docker-mackerel-rpm-builder:c7
    - run: docker pull mackerel/docker-mackerel-deb-builder
    - run: make rpm deb rpm-kcps deb-kcps rpm-stage deb-stage tgz
    - run: make crossbuild
    - uses: actions/upload-artifact@v2
      with:
        name: linux-build-artifacts
        path: |
          rpmbuild/RPMS/*/*.rpm
          packaging/*.deb
          snapshot/*.zip
          snapshot/*.tar.gz
          build/*.tar.gz

  build-windows:
    name: Build (Windows)
    runs-on: windows-2019
    needs: test-windows
#   if: github.ref == 'refs/heads/master'
    env:
      GO111MODULE: on
    strategy:
      matrix:
        include:
          - PLATFORM_ID: x86
            GOARCH: 386
            CC: i686-w64-mingw32-gcc
          - PLATFORM_ID: x64
            GOARCH: amd64
    steps:
    - uses: actions/checkout@v2

    - name: Setup MINGW32
      if: matrix.PLATFORM_ID == 'x86'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW32
        path-type: inherit
        install: mingw-w64-i686-gcc

    - name: Setup golang 386, Setup Environment
      if: matrix.PLATFORM_ID == 'x86'
      uses: ./.github/workflows/386-environment

    - name: Setup golang x64
      if: matrix.PLATFORM_ID == 'x64'
      uses: actions/setup-go@v2
      with:
        go-version: 1.14

    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.PLATFORM_ID }}-go-${{ hashFiles('**\go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.PLATFORM_ID }}-go-${{ hashFiles('**\go.sum') }}

    - name: Build mackerel-agent
      run: |
        $COMMIT = git rev-parse --short HEAD
        mkdir build/
        go build -o build/mackerel-agent.exe -ldflags="-X main.gitcommit=$COMMIT" github.com/mackerelio/mackerel-agent
        go build -o build/mackerel-agent-kcps.exe -ldflags="-X main.gitcommit=$COMMIT -X github.com/mackerelio/mackerel-agent/config.apibase=http://198.18.0.16" github.com/mackerelio/mackerel-agent
      env:
        GOARCH: ${{ matrix.GOARCH }}
        CC: ${{ matrix.CC }}

    - name: Build mackerel-agent-plugins
      run: |
        foreach ($line in (Get-Content wix/pluginlist.txt) -as [string[]]) {
          $piece = $line -split "/"
          $outputFilename = $piece[$piece.Length - 1]
          Write-Host $outputFilename
          go build -o build/$outputFilename.exe $line
        }
      env:
        GOARCH: ${{ matrix.GOARCH }}
        CC: ${{ matrix.CC }}

    - name: Build tools
      run: |
        go build -o build/wrapper.exe wix/wrapper/wrapper_windows.go wix/wrapper/install.go
        go build -o build/replace.exe wix/replace/replace_windows.go wix/replace/shell_windows.go
        go build -o build/generate_wxs.exe wix/generate_wxs/generate_wxs.go
      env:
        GOARCH: ${{ matrix.GOARCH }}
        CC: ${{ matrix.CC }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-build-artifacts-${{ matrix.PLATFORM_ID }}
        path: |
          build/

  windows-installer:
    name: Make Installer (Windows)
    runs-on: windows-2019
    needs: build-windows
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        include:
          - PLATFORM_ID: x86
          - PLATFORM_ID: x64
            MSI_SUFFIX: -x64

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: windows-build-artifacts-${{ matrix.PLATFORM_ID }}
        path: build/

    - name: Get gobump binary
      run: |
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri https://github.com/x-motemen/gobump/releases/download/v0.2.0/gobump_v0.2.0_windows_amd64.zip -OutFile ~/gobump.zip
        Expand-Archive -Path ~/gobump.zip -DestinationPath ~/

    - name: Build Installer
      run: |
        $INFO = (~/gobump_v0.2.0_windows_amd64/gobump.exe show | ConvertFrom-Json)
        Write-Host $INFO
        $VERSION = $INFO.version
        Write-Host $VERSION
        if ($null -eq $VERSION) {
          exit 1
        }
        & "./wix/build.bat" "$VERSION"
      env:
        PLATFORM_ID: ${{ matrix.PLATFORM_ID }}
        MSI_SUFFIX: ${{ matrix.MSI_SUFFIX }}

    - name: Signing Installer
      run: |
        mkdir $env:RUNNER_TEMP/sign/
        $bytes = [Convert]::FromBase64String("${{ secrets.WINDOWS_CERT_P12_BASE64 }}")
        [IO.File]::WriteAllBytes("$env:RUNNER_TEMP/sign/cert.p12", $bytes)
        $SIGNTOOL = "C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x86/signtool.exe";
        & "$SIGNTOOL" sign /fd sha256 /t "http://timestamp.verisign.com/scripts/timestamp.dll" /f "$env:RUNNER_TEMP/sign/cert.p12" /p "${{ secrets.WINDOWS_CERT_P12_PASS }}" /v "build/mackerel-agent${{ matrix.MSI_SUFFIX }}.msi"
        & "$SIGNTOOL" sign /fd sha256 /t "http://timestamp.verisign.com/scripts/timestamp.dll" /f "$env:RUNNER_TEMP/sign/cert.p12" /p "${{ secrets.WINDOWS_CERT_P12_PASS }}" /v "build/mackerel-agent-k${{ matrix.MSI_SUFFIX }}.msi"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: windows-packages-${{ matrix.PLATFORM_ID }}
        path: |
          build/*.msi

  # TODO append runs-on windows-installer
  # TODO append download windows-packages
  # TODO append "windows msi filename" mackerel-github-release collectAssets
  release:
    name: Release to GitHub Releases
    runs-on: ubuntu-latest
    needs: build-linux
    if: github.ref == 'refs/heads/master'
    env:
      DEBIAN_FRONTEND: noninteractive
      GO111MODULE: on
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - run: go get github.com/x-motemen/gobump/cmd/gobump
    - run: go get github.com/mackerelio/golib/cmd/mackerel-github-release
    - uses: actions/download-artifact@v2
      with:
        name: linux-build-artifacts
    - run: mackerel-github-release
      env:
        GITHUB_TOKEN: ${{ secrets.MACKERELBOT_GITHUB_TOKEN }}
    - run: mackerel-github-release -staging
      env:
        GITHUB_TOKEN: ${{ secrets.MACKERELBOT_GITHUB_TOKEN }}
